ggvisOutput("scatterplot")),
id = "tabselected")
)
)
)
# Define server logic
server <- function(input, output) {
# Table on the sidebar for first tab
table = dat[, c("Grade", "HW1")]
output$grades_distribution = renderTable(expr = table)
# Barchart (for 1st tab)
vis_barchart <- reactive({
# Normally we could do something like ggvis(x = ~mpg),
# but since the inputs are strings, we need to do a little more work.
var1 <- prop("x", as.symbol(input$var1))
mtcars %>%
ggvis(x = var1, fill := "#ef623b") %>%
layer_bars(stroke := '#ef623b', width = input$width,
fillOpacity := 0.8, fillOpacity.hover := 1) %>%
add_axis("y", title = "frequency")
})
vis_barchart %>% bind_shiny("barchart")
# Histogram (for 2nd tab)
vis_histogram <- reactive({
# Normally we could do something like ggvis(x = ~mpg),
# but since the inputs are strings, we need to do a little more work.
var2 <- prop("x", as.symbol(input$var2))
mtcars %>%
ggvis(x = var2, fill := "#abafb5") %>%
layer_histograms(stroke := 'white',
width = input$bins)
})
vis_histogram %>% bind_shiny("histogram")
}
# Run the application
shinyApp(ui = ui, server = server)
# required packages
library(shiny)
library(ggvis)
library(dplyr)
# Variable names for histograms
file = "../data/cleandata/cleanscores.csv"
dat = read.csv(file = file, stringsAsFactors = F)
continuous = unlist(colnames(dat)[2:ncol(dat)])
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Grade Visualizer"),
# Sidebar with different widgets depending on the selected tab
sidebarLayout(
sidebarPanel(
conditionalPanel(condition = "input.tabselected==1",
tableOutput(outputId = "grades_distribution")),
conditionalPanel(condition = "input.tabselected==2",
selectInput("var2", "X-axis variable", continuous,
selected = "HW1")
),
conditionalPanel(condition = "input.tabselected==3",
selectInput("var2", "X-axis variable", continuous,
selected = "HW1")
)
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Barchart", value = 1,
ggvisOutput("barchart")),
tabPanel("Histogram", value = 2,
ggvisOutput("histogram")),
tabPanel("Scatterplot", value = 3,
ggvisOutput("scatterplot")),
id = "tabselected")
)
)
)
# Define server logic
server <- function(input, output) {
# Table on the sidebar for first tab
table = dat[, c("Grade", "HW1")]
output$grades_distribution = renderTable(expr = table)
# Barchart (for 1st tab)
# Histogram (for 2nd tab)
vis_histogram <- reactive({
# Normally we could do something like ggvis(x = ~mpg),
# but since the inputs are strings, we need to do a little more work.
var2 <- prop("x", as.symbol(input$var2))
mtcars %>%
ggvis(x = var2, fill := "#abafb5") %>%
layer_histograms(stroke := 'white',
width = input$bins)
})
vis_histogram %>% bind_shiny("histogram")
}
# Run the application
shinyApp(ui = ui, server = server)
letterGrade = c("A+","A","A-","B+","B","B-","C+","C","C-","D", "F")
freq = 1:length(letterGrade)
prop = 1:length(letterGrade)
for(i in freq) {
freq[i] = sum(dat$Grade[letterGrade[i] == dat$Grade])
prop[i] = freq[i]/length(dat$Grade)
}
grades = data.frame(Grade = letterGrade, freq = freq, prop = prop)
letterGrade = c("A+","A","A-","B+","B","B-","C+","C","C-","D", "F")
freq = 1:length(letterGrade)
prop = 1:length(letterGrade)
for(i in freq) {
freq[i] = length(dat$Grade[letterGrade[i] == dat$Grade])
prop[i] = freq[i]/length(dat$Grade)
}
grades = data.frame(Grade = letterGrade, freq = freq, prop = prop)
View(grades)
# required packages
library(shiny)
library(ggvis)
library(dplyr)
# Variable names for histograms
file = "../data/cleandata/cleanscores.csv"
dat = read.csv(file = file, stringsAsFactors = F)
continuous = unlist(colnames(dat)[2:ncol(dat)])
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Grade Visualizer"),
# Sidebar with different widgets depending on the selected tab
sidebarLayout(
sidebarPanel(
conditionalPanel(condition = "input.tabselected==1",
tableOutput(outputId = "grades_distribution")),
conditionalPanel(condition = "input.tabselected==2",
selectInput("var2", "X-axis variable", continuous,
selected = "HW1")
),
conditionalPanel(condition = "input.tabselected==3",
selectInput("var2", "X-axis variable", continuous,
selected = "HW1")
)
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Barchart", value = 1,
ggvisOutput("barchart")),
tabPanel("Histogram", value = 2,
ggvisOutput("histogram")),
tabPanel("Scatterplot", value = 3,
ggvisOutput("scatterplot")),
id = "tabselected")
)
)
)
# Define server logic
server <- function(input, output) {
# Table on the sidebar for first tab
letterGrade = c("A+","A","A-","B+","B","B-","C+","C","C-","D", "F")
freq = 1:length(letterGrade)
prop = 1:length(letterGrade)
for(i in freq) {
freq[i] = sum(dat$Grade[letterGrade[i] == dat$Grade])
prop[i] = freq[i]/length(dat$Grade)
}
grades = data.frame(Grade = letterGrade, freq = freq, prop = prop)
output$grades_distribution = renderTable(expr = table)
# Barchart (for 1st tab)
vis_barchart <- reactive({
# Normally we could do something like ggvis(x = ~mpg),
# but since the inputs are strings, we need to do a little more work.
mtcars %>%
ggvis(x = var1, fill := "#ef623b") %>%
layer_bars(stroke := '#ef623b',
fillOpacity := 0.8, fillOpacity.hover := 1) %>%
add_axis("y", title = "frequency")
})
vis_barchart %>% bind_shiny("barchart")
# Histogram (for 2nd tab)
vis_histogram <- reactive({
# Normally we could do something like ggvis(x = ~mpg),
# but since the inputs are strings, we need to do a little more work.
var2 <- prop("x", as.symbol(input$var2))
mtcars %>%
ggvis(x = var2, fill := "#abafb5") %>%
layer_histograms(stroke := 'white',
width = input$bins)
})
vis_histogram %>% bind_shiny("histogram")
}
# Run the application
shinyApp(ui = ui, server = server)
# required packages
library(shiny)
library(ggvis)
library(dplyr)
# Variable names for histograms
file = "../data/cleandata/cleanscores.csv"
dat = read.csv(file = file, stringsAsFactors = F)
continuous = unlist(colnames(dat)[2:ncol(dat)])
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Grade Visualizer"),
# Sidebar with different widgets depending on the selected tab
sidebarLayout(
sidebarPanel(
conditionalPanel(condition = "input.tabselected==1",
tableOutput(outputId = "grades_distribution")),
conditionalPanel(condition = "input.tabselected==2",
selectInput("var2", "X-axis variable", continuous,
selected = "HW1")
),
conditionalPanel(condition = "input.tabselected==3",
selectInput("var2", "X-axis variable", continuous,
selected = "HW1")
)
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Barchart", value = 1,
ggvisOutput("barchart")),
tabPanel("Histogram", value = 2,
ggvisOutput("histogram")),
tabPanel("Scatterplot", value = 3,
ggvisOutput("scatterplot")),
id = "tabselected")
)
)
)
# Define server logic
server <- function(input, output) {
# Table on the sidebar for first tab
letterGrade = c("A+","A","A-","B+","B","B-","C+","C","C-","D", "F")
freq = 1:length(letterGrade)
prop = 1:length(letterGrade)
for(i in freq) {
freq[i] = length(dat$Grade[letterGrade[i] == dat$Grade])
prop[i] = freq[i]/length(dat$Grade)
}
grades = data.frame(Grade = letterGrade, freq = freq, prop = prop)
output$grades_distribution = renderTable(expr = table)
# Barchart (for 1st tab)
vis_barchart <- reactive({
# Normally we could do something like ggvis(x = ~mpg),
# but since the inputs are strings, we need to do a little more work.
grades %>%
ggvis(x = letterGrade, fill := "#ef623b") %>%
layer_bars(stroke := '#ef623b',
fillOpacity := 0.8, fillOpacity.hover := 1) %>%
add_axis("y", title = "frequency")
})
vis_barchart %>% bind_shiny("barchart")
# Histogram (for 2nd tab)
vis_histogram <- reactive({
# Normally we could do something like ggvis(x = ~mpg),
# but since the inputs are strings, we need to do a little more work.
var2 <- prop("x", as.symbol(input$var2))
mtcars %>%
ggvis(x = var2, fill := "#abafb5") %>%
layer_histograms(stroke := 'white',
width = input$bins)
})
vis_histogram %>% bind_shiny("histogram")
}
# Run the application
shinyApp(ui = ui, server = server)
runApp('C:/Users/Jesse Gao/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('C:/Users/Jesse Gao/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('C:/Users/Jesse Gao/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
grades %>%
ggvis(x = ~letterGrade, y = ~freq, fill := "#ef623b") %>%
layer_bars(stroke := '#ef623b',
fillOpacity := 0.8, fillOpacity.hover := 1) %>%
add_axis("y", title = "frequency")
for(i in freq) {
freq[i] = length(dat$Grade[letterGrade[i] == dat$Grade])
prop[i] = freq[i]/length(dat$Grade)
}
library(shiny)
library(ggvis)
library(dplyr)
file = "../data/cleandata/cleanscores.csv"
dat = read.csv(file = file, stringsAsFactors = F)
continuous = unlist(colnames(dat)[2:ncol(dat)])
ui <- fluidPage(
# Application title
titlePanel("Grade Visualizer"),
# Sidebar with different widgets depending on the selected tab
sidebarLayout(
sidebarPanel(
conditionalPanel(condition = "input.tabselected==1",
tableOutput(outputId = "grades_distribution")),
conditionalPanel(condition = "input.tabselected==2",
selectInput("var2", "X-axis variable", continuous,
selected = "HW1")
),
conditionalPanel(condition = "input.tabselected==3",
selectInput("var2", "X-axis variable", continuous,
selected = "HW1")
)
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Barchart", value = 1,
ggvisOutput("barchart")),
tabPanel("Histogram", value = 2,
ggvisOutput("histogram")),
tabPanel("Scatterplot", value = 3,
ggvisOutput("scatterplot")),
id = "tabselected")
)
)
)
server <- function(input, output) {
# Table on the sidebar for first tab
letterGrade = c("A+","A","A-","B+","B","B-","C+","C","C-","D", "F")
freq = 1:length(letterGrade)
prop = 1:length(letterGrade)
for(i in freq) {
freq[i] = length(dat$Grade[letterGrade[i] == dat$Grade])
prop[i] = freq[i]/length(dat$Grade)
}
grades = data.frame(Grade = letterGrade, freq = freq, prop = prop)
output$grades_distribution = renderTable(expr = table)
# Barchart (for 1st tab)
vis_barchart <- reactive({
# Normally we could do something like ggvis(x = ~mpg),
# but since the inputs are strings, we need to do a little more work.
grades %>%
ggvis(x = ~letterGrade, y = ~freq, fill := "#ef623b") %>%
layer_bars(stroke := '#ef623b',
fillOpacity := 0.8, fillOpacity.hover := 1) %>%
add_axis("y", title = "frequency")
})
vis_barchart %>% bind_shiny("barchart")
# Histogram (for 2nd tab)
vis_histogram <- reactive({
# Normally we could do something like ggvis(x = ~mpg),
# but since the inputs are strings, we need to do a little more work.
var2 <- prop("x", as.symbol(input$var2))
mtcars %>%
ggvis(x = var2, fill := "#abafb5") %>%
layer_histograms(stroke := 'white',
width = input$bins)
})
vis_histogram %>% bind_shiny("histogram")
}
shinyApp(ui = ui, server = server)
letterGrade = c("A+","A","A-","B+","B","B-","C+","C","C-","D", "F")
freq = 1:length(letterGrade)
prop = 1:length(letterGrade)
for(i in freq) {
freq[i] = length(dat$Grade[letterGrade[i] == dat$Grade])
prop[i] = freq[i]/length(dat$Grade)
}
grades = data.frame(Grade = letterGrade, freq = freq, prop = prop)
output$grades_distribution = renderTable(expr = table)
renderTable(expr = table)
ggvis(x = ~letterGrade, y = ~freq, fill := "#ef623b")
ggvis(x = ~letterGrade, y = ~freq)
ggvis(x = ~freq)
ggvis(pressure, props(x = ~temperature, y = ~pressure, y2 = 0)) +
mark_rect(props(width := 10))
runApp('C:/Users/Jesse Gao/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('C:/Users/Jesse Gao/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('C:/Users/Jesse Gao/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('C:/Users/Jesse Gao/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('C:/Users/Jesse Gao/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('C:/Users/Jesse Gao/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('C:/Users/Jesse Gao/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('C:/Users/Jesse Gao/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('C:/Users/Jesse Gao/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('C:/Users/Jesse Gao/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('C:/Users/Jesse Gao/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('C:/Users/Jesse Gao/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('C:/Users/Jesse Gao/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('C:/Users/Jesse Gao/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('C:/Users/Jesse Gao/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
library(shiny)
library(ggvis)
library(dplyr)
file = "../data/cleandata/cleanscores.csv"
dat = read.csv(file = file, stringsAsFactors = F)
continuous = unlist(colnames(dat)[2:(ncol(dat)-1)])
runApp('C:/Users/Jesse Gao/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('C:/Users/Jesse Gao/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('C:/Users/Jesse Gao/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('C:/Users/Jesse Gao/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('C:/Users/Jesse Gao/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('C:/Users/Jesse Gao/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('C:/Users/Jesse Gao/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('C:/Users/Jesse Gao/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('C:/Users/Jesse Gao/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('C:/Users/Jesse Gao/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('C:/Users/Jesse Gao/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('C:/Users/Jesse Gao/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('C:/Users/Jesse Gao/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('C:/Users/Jesse Gao/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
print_stats(summary_stats(dat[input$var1]))
print_stats(summary_stats(dat["HW1"]))
View(dat)
runApp('C:/Users/Jesse Gao/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
print_stats(summary_stats(dat[,"HW1"]))
print_stats(summary_stats(dat[,"HW1"]))
summary_stats(dat[,"HW1"])
?print
source("../code/functions.R")
summary_stats(dat[,"HW1"])
print_stats(summary_stats(dat[,"HW1"]))
View(summary_stats)
runApp('C:/Users/Jesse Gao/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
# Title: Cleaning Data
# Description: This script cleans the data and adds some more values
# Input: csv files
# Output: Cleaned csv file and summary files
library(dplyr)
source("functions.R")
file = "../data/rawdata/rawscores.csv"
dat = read.csv(file = file, stringsAsFactors = F)
cleaned_file = "../data/cleandata/cleanscores.csv"
sink(file = '../output/summary-rawscores.txt')
str(dat)
for (i in 1:ncol(dat)) {
summary = summary_stats(dat[,i])
print_stats(summary)
}
sink()
sink(file = '../output/summary-cleanscores.txt')
str(dat)
for (i in 1:ncol(dat)) {
summary = summary_stats(dat[,i])
print_stats(summary)
}
sink()
for (i in 1:ncol(dat)) {
dat[is.na(dat[,i]),i] = 0
}
dat$QZ1 = rescale100(x = dat$QZ1, xmin = 0, xmax = 12)
dat$QZ2 = rescale100(x = dat$QZ2, xmin = 0, xmax = 18)
dat$QZ3 = rescale100(x = dat$QZ3, xmin = 0, xmax = 20)
dat$QZ4 = rescale100(x = dat$QZ4, xmin = 0, xmax = 20)
dat$Test1 = rescale100(x = dat$EX1, xmin = 0, xmax = 80)
dat$Test2 = rescale100(x = dat$EX2, xmin = 0, xmax = 90)
#homework
hw = 1:nrow(dat)
for(i in hw) {
v = as.numeric(dat[i, 1:9])
hw[i] = get_average(drop_lowest(v), na.rm = F)
}
dat$Homework = hw
#quiz
q = 1:nrow(dat)
for(i in q) {
v = as.numeric(dat[i, 11:14])
q[i] = get_average(drop_lowest(v), na.rm = F)
}
dat$Quiz = q
#overall
o = 1:nrow(dat)
for(i in o) {
v = as.numeric(dat[i, c("ATT", "Homework", "Quiz", "Test1", "Test2")])
v[1] = score_lab(v[1])
weight = c(.1, .3, .15, .2, .25)
o[i] = sum(v*weight)
}
dat$Overall = o
#Grade
g = vector(mode = "character")
for (i in 1:nrow(dat)) {
grade = dat[i, "Overall"]
if (grade <= 100 & grade >= 95) {
g[i] = "A+"
} else if (grade < 95 & grade >= 90) {
g[i] = "A"
} else if (grade < 90 & grade >= 88) {
g[i] = "A-"
} else if (grade < 88 & grade >= 86) {
g[i] = "B+"
} else if (grade < 86 & grade >= 82) {
g[i] = "B"
} else if (grade < 82 & grade >= 79.5) {
g[i] = "B-"
} else if (grade < 79.5 & grade >= 77.5) {
g[i] = "C+"
} else if (grade < 77.5 & grade >= 70) {
g[i] = "C"
} else if (grade < 70 & grade >= 60) {
g[i] = "C-"
} else if (grade < 60 & grade >= 50) {
g[i] = "D"
} else {
g[i] = "F"
}
}
dat$Grade = g
l = 1:nrow(dat)
for(i in l) {
v = as.numeric(dat[i, c("ATT")])
l[i] = score_lab(v[1])
}
dat$Lab = l
names = c("Lab", "Homework", "Quiz", "Test1", "Test2", "Overall")
end = "-stats.txt"
begin = "../output/"
for(s in names) {
sink(file = paste(begin, s, end, sep = ''))
print_stats(summary_stats(dat[,s]))
sink()
}
write.csv(x = dat, file = "../data/cleandata/cleanscores.csv")
# test script
library(testthat)
# source in functions to be tested
source('functions.R')
sink('../output/test-reporter.txt')
test_file('tests.R')
sink()
