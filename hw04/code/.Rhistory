toss <- function(x, times = 1, prob = NULL) {
sample(x, size = times, replace = TRUE,
prob = prob)
}
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Frequency of Heads"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("prob",
"Prob of heads",
min = 0,
max = 1,
value = 0.5),
sliderInput("times",
"Number of tosses",
min = 1,
max = 5000,
value = 100),
numericInput("seed", label = "random seed", value = 123)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
# Define server logic required to draw the plot
server <- function(input, output) {
output$distPlot <- renderPlot({
coin <- c('heads', 'tails')
set.seed(input$seed)
tosses <- toss(coin, times = input$times,
prob = c(input$prob, 1 - input$prob))
head_freqs <- cumsum(tosses == 'heads')
head_props <- head_freqs / (1:length(tosses))
heads_df <- data.frame(
num_tosses = 1:length(tosses),
head_props = head_props
)
# draw frequency line
ggplot(data = heads_df, aes(x = num_tosses, y = head_props)) +
geom_hline(yintercept = 0.5, col = 'gray50') +
geom_path(size = 1.5, color = '#4078d1') +
ylim(0, 1) +
xlab("Number of tosses") +
ylab("Proportion of heads")
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(ggvis)
library(dplyr)
file = "../data/cleandata/cleanscores.csv"
dat = read.csv(file = file, stringsAsFactors = F)
continuous = unlist(dat[1,])
continuous = unlist(colnames(dat))
View(dat)
continuous = unlist(colnames(dat)[2:])
continuous = unlist(colnames(dat)[2:ncol(dat)])
renderTable(dat)
table = dat %>%
group_by(grades) %>%
summarise(count(grades))
table = dat %>%
group_by(Grade) %>%
summarise(count(Grade))
table = dat[,"Grade"]
table = dat[, c("Grade")]
table = dat[, c("Grade", "HW1")]
# required packages
library(shiny)
library(ggvis)
library(dplyr)
# Variable names for histograms
file = "../data/cleandata/cleanscores.csv"
dat = read.csv(file = file, stringsAsFactors = F)
continuous = unlist(colnames(dat)[2:ncol(dat)])
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Grade Visualizer"),
# Sidebar with different widgets depending on the selected tab
sidebarLayout(
sidebarPanel(
conditionalPanel(condition = "input.tabselected==1",
tableOutput(outputId = "grades_distribution")),
conditionalPanel(condition = "input.tabselected==2",
selectInput("var2", "X-axis variable", continuous,
selected = "HW1")
),
conditionalPanel(condition = "input.tabselected==3",
selectInput("var2", "X-axis variable", continuous,
selected = "HW1")
)
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Barchart", value = 1,
ggvisOutput("barchart")),
tabPanel("Histogram", value = 2,
ggvisOutput("histogram")),
tabPanel("Scatterplot", value = 3,
ggvisOutput("scatterplot")),
id = "tabselected")
)
)
)
# Define server logic
server <- function(input, output) {
# Table on the sidebar for first tab
table = dat[, c("Grade", "HW1")]
output$grades_distribution = renderTable(expr = table)
# Barchart (for 1st tab)
vis_barchart <- reactive({
# Normally we could do something like ggvis(x = ~mpg),
# but since the inputs are strings, we need to do a little more work.
var1 <- prop("x", as.symbol(input$var1))
mtcars %>%
ggvis(x = var1, fill := "#ef623b") %>%
layer_bars(stroke := '#ef623b', width = input$width,
fillOpacity := 0.8, fillOpacity.hover := 1) %>%
add_axis("y", title = "frequency")
})
vis_barchart %>% bind_shiny("barchart")
# Histogram (for 2nd tab)
vis_histogram <- reactive({
# Normally we could do something like ggvis(x = ~mpg),
# but since the inputs are strings, we need to do a little more work.
var2 <- prop("x", as.symbol(input$var2))
mtcars %>%
ggvis(x = var2, fill := "#abafb5") %>%
layer_histograms(stroke := 'white',
width = input$bins)
})
vis_histogram %>% bind_shiny("histogram")
}
# Run the application
shinyApp(ui = ui, server = server)
# required packages
library(shiny)
library(ggvis)
library(dplyr)
# Variable names for histograms
file = "../data/cleandata/cleanscores.csv"
dat = read.csv(file = file, stringsAsFactors = F)
continuous = unlist(colnames(dat)[2:ncol(dat)])
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Grade Visualizer"),
# Sidebar with different widgets depending on the selected tab
sidebarLayout(
sidebarPanel(
conditionalPanel(condition = "input.tabselected==1",
tableOutput(outputId = "grades_distribution")),
conditionalPanel(condition = "input.tabselected==2",
selectInput("var2", "X-axis variable", continuous,
selected = "HW1")
),
conditionalPanel(condition = "input.tabselected==3",
selectInput("var2", "X-axis variable", continuous,
selected = "HW1")
)
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Barchart", value = 1,
ggvisOutput("barchart")),
tabPanel("Histogram", value = 2,
ggvisOutput("histogram")),
tabPanel("Scatterplot", value = 3,
ggvisOutput("scatterplot")),
id = "tabselected")
)
)
)
# Define server logic
server <- function(input, output) {
# Table on the sidebar for first tab
table = dat[, c("Grade", "HW1")]
output$grades_distribution = renderTable(expr = table)
# Barchart (for 1st tab)
# Histogram (for 2nd tab)
vis_histogram <- reactive({
# Normally we could do something like ggvis(x = ~mpg),
# but since the inputs are strings, we need to do a little more work.
var2 <- prop("x", as.symbol(input$var2))
mtcars %>%
ggvis(x = var2, fill := "#abafb5") %>%
layer_histograms(stroke := 'white',
width = input$bins)
})
vis_histogram %>% bind_shiny("histogram")
}
# Run the application
shinyApp(ui = ui, server = server)
letterGrade = c("A+","A","A-","B+","B","B-","C+","C","C-","D", "F")
freq = 1:length(letterGrade)
prop = 1:length(letterGrade)
for(i in freq) {
freq[i] = sum(dat$Grade[letterGrade[i] == dat$Grade])
prop[i] = freq[i]/length(dat$Grade)
}
grades = data.frame(Grade = letterGrade, freq = freq, prop = prop)
letterGrade = c("A+","A","A-","B+","B","B-","C+","C","C-","D", "F")
freq = 1:length(letterGrade)
prop = 1:length(letterGrade)
for(i in freq) {
freq[i] = length(dat$Grade[letterGrade[i] == dat$Grade])
prop[i] = freq[i]/length(dat$Grade)
}
grades = data.frame(Grade = letterGrade, freq = freq, prop = prop)
View(grades)
# required packages
library(shiny)
library(ggvis)
library(dplyr)
# Variable names for histograms
file = "../data/cleandata/cleanscores.csv"
dat = read.csv(file = file, stringsAsFactors = F)
continuous = unlist(colnames(dat)[2:ncol(dat)])
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Grade Visualizer"),
# Sidebar with different widgets depending on the selected tab
sidebarLayout(
sidebarPanel(
conditionalPanel(condition = "input.tabselected==1",
tableOutput(outputId = "grades_distribution")),
conditionalPanel(condition = "input.tabselected==2",
selectInput("var2", "X-axis variable", continuous,
selected = "HW1")
),
conditionalPanel(condition = "input.tabselected==3",
selectInput("var2", "X-axis variable", continuous,
selected = "HW1")
)
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Barchart", value = 1,
ggvisOutput("barchart")),
tabPanel("Histogram", value = 2,
ggvisOutput("histogram")),
tabPanel("Scatterplot", value = 3,
ggvisOutput("scatterplot")),
id = "tabselected")
)
)
)
# Define server logic
server <- function(input, output) {
# Table on the sidebar for first tab
letterGrade = c("A+","A","A-","B+","B","B-","C+","C","C-","D", "F")
freq = 1:length(letterGrade)
prop = 1:length(letterGrade)
for(i in freq) {
freq[i] = sum(dat$Grade[letterGrade[i] == dat$Grade])
prop[i] = freq[i]/length(dat$Grade)
}
grades = data.frame(Grade = letterGrade, freq = freq, prop = prop)
output$grades_distribution = renderTable(expr = table)
# Barchart (for 1st tab)
vis_barchart <- reactive({
# Normally we could do something like ggvis(x = ~mpg),
# but since the inputs are strings, we need to do a little more work.
mtcars %>%
ggvis(x = var1, fill := "#ef623b") %>%
layer_bars(stroke := '#ef623b',
fillOpacity := 0.8, fillOpacity.hover := 1) %>%
add_axis("y", title = "frequency")
})
vis_barchart %>% bind_shiny("barchart")
# Histogram (for 2nd tab)
vis_histogram <- reactive({
# Normally we could do something like ggvis(x = ~mpg),
# but since the inputs are strings, we need to do a little more work.
var2 <- prop("x", as.symbol(input$var2))
mtcars %>%
ggvis(x = var2, fill := "#abafb5") %>%
layer_histograms(stroke := 'white',
width = input$bins)
})
vis_histogram %>% bind_shiny("histogram")
}
# Run the application
shinyApp(ui = ui, server = server)
# required packages
library(shiny)
library(ggvis)
library(dplyr)
# Variable names for histograms
file = "../data/cleandata/cleanscores.csv"
dat = read.csv(file = file, stringsAsFactors = F)
continuous = unlist(colnames(dat)[2:ncol(dat)])
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Grade Visualizer"),
# Sidebar with different widgets depending on the selected tab
sidebarLayout(
sidebarPanel(
conditionalPanel(condition = "input.tabselected==1",
tableOutput(outputId = "grades_distribution")),
conditionalPanel(condition = "input.tabselected==2",
selectInput("var2", "X-axis variable", continuous,
selected = "HW1")
),
conditionalPanel(condition = "input.tabselected==3",
selectInput("var2", "X-axis variable", continuous,
selected = "HW1")
)
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Barchart", value = 1,
ggvisOutput("barchart")),
tabPanel("Histogram", value = 2,
ggvisOutput("histogram")),
tabPanel("Scatterplot", value = 3,
ggvisOutput("scatterplot")),
id = "tabselected")
)
)
)
# Define server logic
server <- function(input, output) {
# Table on the sidebar for first tab
letterGrade = c("A+","A","A-","B+","B","B-","C+","C","C-","D", "F")
freq = 1:length(letterGrade)
prop = 1:length(letterGrade)
for(i in freq) {
freq[i] = length(dat$Grade[letterGrade[i] == dat$Grade])
prop[i] = freq[i]/length(dat$Grade)
}
grades = data.frame(Grade = letterGrade, freq = freq, prop = prop)
output$grades_distribution = renderTable(expr = table)
# Barchart (for 1st tab)
vis_barchart <- reactive({
# Normally we could do something like ggvis(x = ~mpg),
# but since the inputs are strings, we need to do a little more work.
grades %>%
ggvis(x = letterGrade, fill := "#ef623b") %>%
layer_bars(stroke := '#ef623b',
fillOpacity := 0.8, fillOpacity.hover := 1) %>%
add_axis("y", title = "frequency")
})
vis_barchart %>% bind_shiny("barchart")
# Histogram (for 2nd tab)
vis_histogram <- reactive({
# Normally we could do something like ggvis(x = ~mpg),
# but since the inputs are strings, we need to do a little more work.
var2 <- prop("x", as.symbol(input$var2))
mtcars %>%
ggvis(x = var2, fill := "#abafb5") %>%
layer_histograms(stroke := 'white',
width = input$bins)
})
vis_histogram %>% bind_shiny("histogram")
}
# Run the application
shinyApp(ui = ui, server = server)
runApp('C:/Users/Jesse Gao/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('C:/Users/Jesse Gao/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('C:/Users/Jesse Gao/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
grades %>%
ggvis(x = ~letterGrade, y = ~freq, fill := "#ef623b") %>%
layer_bars(stroke := '#ef623b',
fillOpacity := 0.8, fillOpacity.hover := 1) %>%
add_axis("y", title = "frequency")
for(i in freq) {
freq[i] = length(dat$Grade[letterGrade[i] == dat$Grade])
prop[i] = freq[i]/length(dat$Grade)
}
library(shiny)
library(ggvis)
library(dplyr)
file = "../data/cleandata/cleanscores.csv"
dat = read.csv(file = file, stringsAsFactors = F)
continuous = unlist(colnames(dat)[2:ncol(dat)])
ui <- fluidPage(
# Application title
titlePanel("Grade Visualizer"),
# Sidebar with different widgets depending on the selected tab
sidebarLayout(
sidebarPanel(
conditionalPanel(condition = "input.tabselected==1",
tableOutput(outputId = "grades_distribution")),
conditionalPanel(condition = "input.tabselected==2",
selectInput("var2", "X-axis variable", continuous,
selected = "HW1")
),
conditionalPanel(condition = "input.tabselected==3",
selectInput("var2", "X-axis variable", continuous,
selected = "HW1")
)
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Barchart", value = 1,
ggvisOutput("barchart")),
tabPanel("Histogram", value = 2,
ggvisOutput("histogram")),
tabPanel("Scatterplot", value = 3,
ggvisOutput("scatterplot")),
id = "tabselected")
)
)
)
server <- function(input, output) {
# Table on the sidebar for first tab
letterGrade = c("A+","A","A-","B+","B","B-","C+","C","C-","D", "F")
freq = 1:length(letterGrade)
prop = 1:length(letterGrade)
for(i in freq) {
freq[i] = length(dat$Grade[letterGrade[i] == dat$Grade])
prop[i] = freq[i]/length(dat$Grade)
}
grades = data.frame(Grade = letterGrade, freq = freq, prop = prop)
output$grades_distribution = renderTable(expr = table)
# Barchart (for 1st tab)
vis_barchart <- reactive({
# Normally we could do something like ggvis(x = ~mpg),
# but since the inputs are strings, we need to do a little more work.
grades %>%
ggvis(x = ~letterGrade, y = ~freq, fill := "#ef623b") %>%
layer_bars(stroke := '#ef623b',
fillOpacity := 0.8, fillOpacity.hover := 1) %>%
add_axis("y", title = "frequency")
})
vis_barchart %>% bind_shiny("barchart")
# Histogram (for 2nd tab)
vis_histogram <- reactive({
# Normally we could do something like ggvis(x = ~mpg),
# but since the inputs are strings, we need to do a little more work.
var2 <- prop("x", as.symbol(input$var2))
mtcars %>%
ggvis(x = var2, fill := "#abafb5") %>%
layer_histograms(stroke := 'white',
width = input$bins)
})
vis_histogram %>% bind_shiny("histogram")
}
shinyApp(ui = ui, server = server)
letterGrade = c("A+","A","A-","B+","B","B-","C+","C","C-","D", "F")
freq = 1:length(letterGrade)
prop = 1:length(letterGrade)
for(i in freq) {
freq[i] = length(dat$Grade[letterGrade[i] == dat$Grade])
prop[i] = freq[i]/length(dat$Grade)
}
grades = data.frame(Grade = letterGrade, freq = freq, prop = prop)
output$grades_distribution = renderTable(expr = table)
renderTable(expr = table)
ggvis(x = ~letterGrade, y = ~freq, fill := "#ef623b")
ggvis(x = ~letterGrade, y = ~freq)
ggvis(x = ~freq)
ggvis(pressure, props(x = ~temperature, y = ~pressure, y2 = 0)) +
mark_rect(props(width := 10))
runApp('C:/Users/Jesse Gao/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('C:/Users/Jesse Gao/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('C:/Users/Jesse Gao/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('C:/Users/Jesse Gao/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('C:/Users/Jesse Gao/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('C:/Users/Jesse Gao/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('C:/Users/Jesse Gao/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('C:/Users/Jesse Gao/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('C:/Users/Jesse Gao/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('C:/Users/Jesse Gao/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('C:/Users/Jesse Gao/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('C:/Users/Jesse Gao/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('C:/Users/Jesse Gao/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('C:/Users/Jesse Gao/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('C:/Users/Jesse Gao/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
library(shiny)
library(ggvis)
library(dplyr)
file = "../data/cleandata/cleanscores.csv"
dat = read.csv(file = file, stringsAsFactors = F)
continuous = unlist(colnames(dat)[2:(ncol(dat)-1)])
runApp('C:/Users/Jesse Gao/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('C:/Users/Jesse Gao/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('C:/Users/Jesse Gao/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('C:/Users/Jesse Gao/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('C:/Users/Jesse Gao/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('C:/Users/Jesse Gao/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('C:/Users/Jesse Gao/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('C:/Users/Jesse Gao/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('C:/Users/Jesse Gao/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('C:/Users/Jesse Gao/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('C:/Users/Jesse Gao/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('C:/Users/Jesse Gao/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('C:/Users/Jesse Gao/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('C:/Users/Jesse Gao/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
print_stats(summary_stats(dat[input$var1]))
print_stats(summary_stats(dat["HW1"]))
View(dat)
runApp('C:/Users/Jesse Gao/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
print_stats(summary_stats(dat[,"HW1"]))
print_stats(summary_stats(dat[,"HW1"]))
summary_stats(dat[,"HW1"])
?print
source("../code/functions.R")
summary_stats(dat[,"HW1"])
print_stats(summary_stats(dat[,"HW1"]))
View(summary_stats)
runApp('C:/Users/Jesse Gao/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
